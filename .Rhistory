)
colors <- tibble::tribble( ~substance, ~color,
"<any>",    "cornflowerblue",
)
# reallife
nodes   <- read_xlsx("my_sankey_data.xlsx", "nodes")
flows   <- read_xlsx("my_sankey_data.xlsx", "flows")
colors  <- read_xlsx("my_sankey_data.xlsx", "colors")
#check_consistency(nodes, flows, colors)
#check_balance(nodes, flows)
sankey(nodes, flows, colors)
# PantaRhei::sankey(nodes, flows,  node_style=ns,
#                   legend=gpar(filesize=18, col="blue", ncols=2),
#                   page_margin=c(0.1, 0.1, 0.1, 0.2),
#                   title=strformat("Panta Rhei", fontsize=18, col="blue") )
# Hard cop output
pdf("diagram.pdf", width=10, height=7) # Set up PDF device
sankey(nodes, flows, colors)           # plot diagram
dev.off()                              # close PDF device
library(PantaRhei)
data(MFA) # Material Flow Account data, list of three tables
str(MFA)
MFA[1]
# node style
library(grid) # loads: gpar()
dblue <- "#00008B" # Dark blue
my_title <- "Material Flow Account"
attr(my_title, "gp") <- grid::gpar(fontsize=18, fontface="bold", col=dblue)
# node style ns
ns <- list(type="arrow",gp=gpar(fill=dblue, col="white", lwd=2),
length=0.7,
label_gp=gpar(col=dblue, fontsize=8),
mag_pos="label", mag_fmt="%.0f",
mag_gp=gpar(fontsize=10,fontface="bold",col=dblue)
)
sankey(MFA$nodes, MFA$flows, MFA$palette,
max_width   = 0.1,   rmin=0.5,
node_style  = ns,
page_margin = c(0.15, 0.05, 0.1, 0.1),
legend=TRUE, title=my_title,  copyright="Statistics Netherlands"
)
install.packages("anicon")
###################################################
devtools::install_github('emitanaka/anicon')
###################################################
devtools::install_github('emitanaka/anicon')
usethis::edit_r_environ()
oc_config(
key = Sys.getenv("OPENCAGE_KEY"),
rate_sec = getOption("oc_rate_sec", default = 1L),
no_record = getOption("oc_no_record", default = TRUE),
show_key = getOption("oc_show_key", default = FALSE),
...
)
############ OPENCAGE_KEY=3721d0dffdf54328b9dfc5eacd95005d
# usethis::edit_r_environ()
remotes::install_github("ropensci/opencage")
library(opencage)
library(opencage)
############ OPENCAGE_KEY=3721d0dffdf54328b9dfc5eacd95005d
# usethis::edit_r_environ()
install.packages("opencage")
#remotes::install_github("ropensci/opencage")
library(opencage)
############ OPENCAGE_KEY=3721d0dffdf54328b9dfc5eacd95005d
# usethis::edit_r_environ()
# install.packages("opencage")
remotes::install_github("ropensci/opencage")
library(opencage)
oc_config(
key = Sys.getenv("OPENCAGE_KEY"),
rate_sec = getOption("oc_rate_sec", default = 1L),
no_record = getOption("oc_no_record", default = TRUE),
show_key = getOption("oc_show_key", default = FALSE),
...
)
library(opencage)
library("opencage")
############ OPENCAGE_KEY=3721d0dffdf54328b9dfc5eacd95005d
# usethis::edit_r_environ()
# install.packages("opencage")
remotes::install_github("ropensci/opencage")
############ OPENCAGE_KEY=3721d0dffdf54328b9dfc5eacd95005d
# usethis::edit_r_environ()
# install.packages("opencage")
remotes::install_github("ropensci/opencage", force = TRUE)
library("opencage")
library(flexsurv)
install.packages("flexsurv")
library(flexsurv)
##########################
library(ggfortify)
library(survival)
library(survminer)
library(KMsurv)
library(flexsurv)
library(Epi)
library(epitools)
library(plotly)
library(cowplot)
library(Cairo) # problems in Cairo
orca <- read.table("http://www.stats4life.se/data/oralca.txt")
head(orca)
str(orca)
summary(orca)  # gimplse
### Draw line diagram
tm <- matrix(  c(NA,  NA,
1,   NA),   ncol = 2   )
rownames(tm) <- colnames(tm) <- c("Alive", "Death")
tm2 <- matrix(   c(  NA, NA, NA,
1, NA, NA,
2, NA, NA), ncol = 3)
rownames(tm2) <- colnames(tm2) <- levels(orca$event)
par(mfrow = c(1, 2))
layout(rbind(c(1, 2, 2)))
tm
boxes.matrix(tm, boxpos = TRUE)    # Epi package
title("A)")
tm2
boxes.matrix(tm2, boxpos = TRUE)
title("B)")
#######
table(orca$event)
orca <- mutate(orca, all = event != "Alive")
table(orca$all)
orca
pp <- orca %>%    # ?factor(event) %>%     fct_infreq(event) %>%
mutate(       text = paste("Subject ID = ", id, "<br>", "Time = ", time, "<br>", "Event = ",
event, "<br>", "Age = ", round(age, 2), "<br>", "Stage = ", stage)   ) %>%
ggplot(         aes(x   = id,  y = time,  text = text)  )          +
geom_linerange( aes(ymin = 0, ymax = time ) , alpha= 0.4 )         +
geom_point(aes(shape = event, color = event), stroke = 1, cex = 2) +
# scale_shape_manual(values = c(1, 3, 4)) +
labs( y = "Time (years)" ,  x = "Subject ID" ) +
coord_flip() + theme_classic()
pp
p <- plot_ly(pp)
ggplotly(g, tooltip = c("city"))
ggplotly(   # erro cairo ?
orca %>%
mutate(
text = paste("Subject ID = ", id, "<br>", "Time = ", time, "<br>", "Event = ",
event, "<br>", "Age = ", round(age, 2), "<br>", "Stage = ", stage)
) %>%
ggplot(aes(x = id, y = time, text = text)) +
geom_linerange(aes(ymin = 0, ymax = time)) +
geom_point(aes(shape = event, color = event), stroke = 1, cex = 2) +
scale_shape_manual(values = c(1, 3, 4))    +
labs(y = "Time (years)", x = "Subject ID" ) +
coord_flip() + theme_classic()    #  + tooltip = "text"
)
grid.arrange(     # good plot
ggplot(orca, aes(x = id, y = time)) +
geom_linerange(aes(ymin = 0, ymax = time)) +
geom_point(aes(shape = event, color = event), stroke = 1, cex = 2) +
scale_shape_manual(values = c(1, 3, 4)) + guides(shape = F, color = F) +
labs(y = "Time (years)", x = "Subject ID") + coord_flip() + theme_classic(),
orca %>%
mutate(age_orig = age,
age_end = age + time) %>%
ggplot(aes(x = id, y = age_end)) +
geom_linerange(aes(ymin = age_orig, ymax = age_end)) +
geom_point(aes(shape = event, color = event), stroke = 1, cex = 2) +
scale_shape_manual(values = c(1, 3, 4)) + guides(fill = FALSE) +
labs(y = "Age (years)", x = "Subject ID") + coord_flip() + theme_classic(),
ncol = 2
)
su_obj <- Surv(orca$time, orca$all)
str(su_obj)
su_obj
fit_km <- survfit(Surv(time, all) ~ 1, data = orca)
fit_km
print(fit_km, print.rmean = TRUE)
dat_km <- fortify(fit_km)   # ???
head(dat_km)
ggsurvplot(fit_km, risk.table = TRUE, xlab = "Time (years)", censor = T)   # good
glist <- list(
ggsurvplot(fit_km, fun = "event", main = "Cumulative proportion"),
ggsurvplot(fit_km, fun = "cumhaz",  main = "Cumulative Hazard"),
ggsurvplot(fit_km, fun = "cloglog", main = "Complementary logâˆ’log")
)
arrange_ggsurvplots(glist, print = TRUE, ncol = 3, nrow = 1)
cuts <- seq(0, 23, 1)
lifetab_dat <- orca %>%
mutate(time_cat = cut(time, cuts)) %>%
group_by(time_cat) %>%
summarise(nlost = sum(all == 0),
nevent = sum(all == 1))
lifetab_dat
dat_lt <- with(lifetab_dat, lifetab(tis = cuts, ninit = nrow(orca), nlost = nlost, nevent = nevent))
dat_lt
round(dat_lt, 3)
fit_fh <- survfit(su_obj ~ 1, data = orca, type = "fleming-harrington", conf.type = "log-log")
dat_fh <- fortify(fit_fh)  # ???? data frame
## for the Nelson-Aalen estimator of the cumulative hazard
## dat_fh <- fortify(fit_fh, fun = "cumhaz")
head(dat_fh)
# # Data dat_km from fortyfy cause error
ggplotly(
ggplot() +
geom_step(data = dat_km, aes(x = time, y = surv, colour = "K-M")) +
geom_step(data = dat_fh, aes(x = time, y = surv, colour = "N-A")) +
geom_step(data = dat_lt, aes(x = cuts[-length(cuts)], y = surv, colour = "LT")) +
labs(x = "Time (years)", y = "Survival", colour = "Estimator") +
theme_classic()
)
(  mc <- data.frame(q = c(.25, .5, .75), km = quantile(fit_km), fh = quantile(fit_fh))   )
ggsurvplot(fit_km, xlab = "Time (years)", censor = F)$plot +
geom_segment(data = mc, aes(x = km.quantile, y = 1-q, xend = km.quantile, yend = 0), lty = 2) +
geom_segment(data = mc, aes(x = 0, y = 1-q, xend = km.quantile, yend = 1-q), lty = 2)
fit_exp <- flexsurvreg(su_obj ~ 1, data = orca, dist = "exponential")
fit_exp
fit_w  <- flexsurvreg(su_obj ~ 1, data = orca, dist = "weibull")
fit_ll <- flexsurvreg(su_obj ~ 1, data = orca, dist = "llogis")
fit_sp <- flexsurvspline(su_obj ~ 1, data = orca, k = 1, scale = "odds")
grid.arrange(
ggplot(data.frame(summary(fit_exp)), aes(x = time)) +
geom_line(aes(y = est, col = "Exponential")) +
geom_line(data = data.frame(summary(fit_w)), aes(y = est, col = "Weibull")) +
geom_line(data = data.frame(summary(fit_ll)), aes(y = est, col = "Log-logistic")) +
geom_line(data = data.frame(summary(fit_sp)), aes(y = est, col = "Flex splines")) +
labs(x = "Time (years)", y = "Survival", col = "Distributions") + theme_classic(),
ggplot(data.frame(summary(fit_exp, type = "hazard")), aes(x = time)) +
geom_line(aes(y = est, col = "Exponential")) +
geom_line(data = data.frame(summary(fit_w, type = "hazard")), aes(y = est, col = "Weibull")) +
geom_line(data = data.frame(summary(fit_ll, type = "hazard")), aes(y = est, col = "Log-logistic")) +
geom_line(data = data.frame(summary(fit_sp, type = "hazard")), aes(y = est, col = "Flex splines")) +
labs(x = "Time (years)", y = "Hazard", col = "Distributions") + theme_classic(),
ncol = 2
)
#ci.exp(glm(all ~ 0 + stage, data = orca, family = "poisson", offset = log(time)))
group_by(orca, stage) %>%
summarise(   D = sum(all),   Y = sum(time)    ) %>%
cbind(     pois.approx(x = .$D, pt = .$Y)     )
su_stg  <- survfit(su_obj ~ stage, data = orca)
su_stg
ggsurvplot(su_stg, fun = "event", censor = F, xlab = "Time (years)")
lifetab_stg <- fortify(su_stg)       # fortyfy data ??
lifetab_stg %>%
group_by(strata) %>%
do(head(., n = 3))
glist <- list(
ggsurvplot(su_stg, fun = "cumhaz"),
ggsurvplot(su_stg, fun = "cloglog")
)
# plot(su_stg, fun = "cloglog")
arrange_ggsurvplots(glist, print = TRUE, ncol = 2, nrow = 2)
library(caret)
fitControl <- trainControl(method = "cv", number = 10) #5folds
tune_Grid <-  expand.grid(interaction.depth = 2,  n.trees = 500,   shrinkage = 0.1,  n.minobsinnode = 10)
set.seed(825)
fit <- train(y_train ~ ., data = train, method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid)
predicted= predict(fit,test,type= "prob")[,2]
pkg <- c("tidyverse", "survival", "ggfortify", "survminer", "plotly", "gridExtra",
"Epi", "KMsurv", "gnm", "cmprsk", "mstate", "flexsurv", "splines",
"epitools", "eha", "shiny", "ctqr", "scales")
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
install.packages("survival")
library(survival)
# sort the aml data by time
aml <- aml[order(aml$time),]
print(aml)
# Create graph of length of time that each subject was in the study
with(aml, plot(time, type="h"))
# Create the life table survival object for aml
# The functions survfit() and Surv() create a life table survival object.
# The life table object is passed to the plot() function to create the KM plot.
aml.survfit <- survfit(Surv(time, status == 1) ~ 1, data=aml)
# Plot the Kaplan-Meier curve for aml.
# By default, R includes the confidence interval.
plot(aml.survfit, xlab = "Time (weeks)", ylab="Proportion surviving", main="Survival in AML")
# The summary() function displays the life table
summary(aml.survfit)
# Create aml life tables and KM plots broken out by treatment (x,  "Maintained" vs. "Not maintained")
surv.by.aml.rx <- survfit(Surv(time, status == 1) ~ x, data = aml)
summary(surv.by.aml.rx)
# Plot KM
plot(surv.by.aml.rx, xlab = "Time", ylab="Survival",col=c("black", "red"), lty = 1:2, main="Kaplan-Meier Survival vs. Maintenance in AML")
# Add legend
legend(100, .6, c("Maintained", "Not maintained"), lty = 1:2, col=c("black", "red"))
surv.diff.aml <- survdiff(Surv(time, status == 1) ~ x, data=aml)
surv.diff.aml
library(ISwR)
help(melanom) # description of the melanoma data
# The log rank test is a special case of the cox proportional hazard regression analysis.
# The same analysis can be performed using the R function coxph().
# melanoma example using a log-rank test.
surv.diff.sex <- survdiff(Surv(days, status == 1) ~ sex, data = melanom)
surv.diff.sex
# melanoma analysis using Cox proportional hazards regression
coxph.sex <- coxph(Surv(days, status == 1) ~ sex, data = melanom)
summary(coxph.sex)
# Plot the thickness values and log(thickness)
hist(melanom$thick)
hist(log(melanom$thick))
coxph.sex.thick <- coxph(Surv(days, status == 1) ~ sex + log(thick), data = melanom)
summary(coxph.sex.thick)
# Examine thickness by sex
boxplot(log(melanom$thick) ~ melanom$sex)
t.test(log(melanom$thick) ~ melanom$sex)
# Test of proportional hazards assumption
coxph.sex <- coxph(Surv(days, status == 1) ~ sex, data = melanom)
cox.zph(coxph.sex)
library("opencage")
##############
install.packages('tidygeocoder')
# devtools::install_github("jessecambon/tidygeocoder")
library(dplyr)
library(tibble)
library(tidygeocoder)
# create a dataframe with addresses
some_addresses <- tribble(
~name,                  ~addr,
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",
"Transamerica Pyramid", "600 Montgomery St, San Francisco, CA 94111",
"Willis Tower",         "233 S Wacker Dr, Chicago, IL 60606"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
library(ggplot2)
library(maps)
library(ggrepel)
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
library("opencage")
some_addresses <- tribble(
~name,                  ~addr,
"Rail Bhawan",          "Rail Bhawan, New Delhi, India 110001",
"RDSO",                 "Manak Nagar, Alambagh, Lucknow, Uttar Pradesh, India 226011",
"Baroda House",         "Baroda House, coppernicus marg, new delhi, 110001"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,
"Rail Bhawan",          "Rail Bhawan, New Delhi, India",
"RDSO",                 "Manak Nagar, Alambagh, Lucknow, Uttar Pradesh, India 226011",
"Baroda House",         "Baroda House, coppernicus marg, new delhi, 110001"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,
"Rail Bhawan",          "Rail Bhawan, New Delhi, India",
"RDSO",                 "Manak Nagar, Alambagh, Lucknow, Uttar Pradesh, India 226011",
"Baroda House",         "Baroda House, coppernicus marg, new delhi, 110001"      ,
"SGRH",                 "Sir Ganga Ram Hospital, Rajinder Nagar, New Delhi, India"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
# create a dataframe with addresses
some_addresses <- tribble(
~name,                  ~addr,
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",
"Transamerica Pyramid", "600 Montgomery St, San Francisco, CA 94111",
"Willis Tower",         "233 S Wacker Dr, Chicago, IL 60606"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,
"Rail Bhawan",          "Rail Bhawan, New Delhi, India",
"RDSO",                 "Manak Nagar, Alambagh, Lucknow, Uttar Pradesh, India 226011",
"Baroda House",         "Baroda House, coppernicus marg, new delhi, 110001"      ,
"SGRH",                 "Sir Ganga Ram Hospital, Rajinder Nagar, New Delhi, India"
)
some_addresses
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,
"Rail Bhawan",          "Rail Bhawan, New Delhi, India",
"RDSO",                 "Manak Nagar, Alambagh, Lucknow, Uttar Pradesh, India 226011",
"Baroda House",         "Baroda House, coppernicus marg, new delhi, 110001"      ,
"SGRH",                 "Sir Ganga Ram Hospital, Rajinder Nagar, New Delhi, India"
)
some_addresses
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
some_addresses <- tribble(
~name,                  ~addr,         ~city,  ~country,
"Rail Bhawan",          "Rail Bhawan", "New Delhi", "India",
"RDSO",                 "Manak Nagar",  "Lucknow", "India",
"Baroda House",         "Baroda House", "new delhi", "India"      ,
"SGRH",                 "Sir Ganga Ram Hospital, Rajinder Nagar", "New Delhi", "India"
)
some_addresses
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,         ~city,  ~country,
"Rail Bhawan",          "Rail Bhawan", "New Delhi", "India",
"RDSO",                 "Manak Nagar",  "Lucknow", "India",
"Baroda House",         "Baroda House, New Delhi", "new delhi", "India"      ,
"SGRH",                 "Sir Ganga Ram Hospital, Rajinder Nagar", "New Delhi", "India"
)
some_addresses
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
some_addresses <- tribble(
~name,                  ~addr,         ~city,  ~country,
"Rail Bhawan",          "Rail Bhawan", "New Delhi", "India",
"RDSO",                 "Manak Nagar",  "Lucknow", "India",
"Baroda House",         "Baroda House, New Delhi", "new delhi", "India"      ,
"SGRH",                 "Rajinder Nagar", "New Delhi", "India"
)
some_addresses
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
lat_longs
library(ggplot2)
library(maps)
library(ggrepel)
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
library("sf")
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
library(sf)
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
# reverse geocode
reverse <- lat_longs %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = address_found, full_results = TRUE) %>%
select(-addr, -licence)
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point() +
geom_label_repel(aes(label = name)) +
theme_void()
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point()  # +
lat_longs
lat_longs
plot(longitude, latitude)
plot(lat_longs$longitude, lat_longs$latitude)
# Use standard tidyverse tools
library(readr)
library(dplyr)
library(tidyverse)
library(maps)
# usethis::edit_r_environ()
# install.packages("opencage")
remotes::install_github("ropensci/opencage", force = TRUE)
library(ggplot2)
library(maps)
library(ggrepel)
library(sf)
plot(lat_longs$longitude, lat_longs$latitude)
ggplot(lat_longs, aes(longitude, latitude), color = "grey99") +
borders("state") + geom_point()  # +
geom_label_repel(aes(label = name)) + theme_void()
plot(lat_longs$longitude, lat_longs$latitude)
# Libraries
library(ggplot2)
library(highcharter)
library(dplyr)
library(plotly)
library(viridis)
library(rayshader)
# or
geom_point() + scale_x_continuous("Item Visibility", breaks = seq(0,0.35,0.05))+ scale_y_continuous("Item MRP", breaks = seq(0,270,by = 30))
# pairs plot,
data<-dplyr::select(mtcars,mpg,disp,hp)
pairs(data)
# pairs plot,
data<-dplyr::select(mtcars,mpg,disp,hp)
pairs(data)
GGally::ggpairs(data)  +  theme_bw()
GGally::ggpairs(data,
upper = list(continuous = "density", combo = "box_no_facet"),
lower = list(continuous = "points", combo = "dot_no_facet")    )
xaringan::infinite_moon_reader()
install.packages("quarto")
install.packages("quarto")
quarto::quarto_render("hello.qmd")
quarto::quarto_render("hello.qmd")
